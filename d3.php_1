<?php
$site_base = WIKKA_BASE_URL;
$relative_path = explode( ',', $this->GetConfigValue('action_path'));
$my_action_path = "error_error";

foreach ($relative_path as $key => $value) {
	if ( is_file($value.'/d3/d3/d3.v4.min.js') )
  {
			 		$my_action_path = $value.'/d3/d3/d3.v4.min.js';
	}
}
echo '<script type="text/javascript" src="'.$my_action_path.'"></script>';

/*
// 0. define upload path for the current page
if ($this->GetConfigValue('upload_path') == '')
{
        $this->SetConfigValue('upload_path','files');
}
$upload_path = $this->GetConfigValue('upload_path').DIRECTORY_SEPARATOR; # #89

$httmlpage = str_replace("wikka.php?wakka=", "$upload_path", $this->href("",$this->GetPageTag().DIRECTORY_SEPARATOR));
// Note que esto no altera el nombre de archivo.
$httmlpage = str_replace("_", "%20", $httmlpage);

//echo $httmlpage;
//$width = $this->htmlspecialchars_ent(trim($vars['width']));
//$height = $this->htmlspecialchars_ent(trim($vars['height']));
$url = str_replace(" ", "%2520", $url);
$url = $this->cleanUrl(trim($vars['url']));

echo '<iframe frameBorder="0" align="middle" width="'."800px".'" height="'."600px".'" src="'.$httmlpage.$url.'"></iframe>';

//clickable link
//echo $this->Link($this->href("", $this->GetPageTag()));
*/
?>
<style>

.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

</style>
<svg width="960" height="600"></svg>
<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var color = d3.scaleOrdinal(d3.schemeCategory20);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

d3.json("miserables.json", function(error, graph) {
  if (error) throw error;

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("circle")
    .data(graph.nodes)
    .enter().append("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return color(d.group); })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  node.append("title")
      .text(function(d) { return d.id; });

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }
});

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

</script>
